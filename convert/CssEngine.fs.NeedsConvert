//     /// Break words only at allowed break points
//     member _.wordWrap_normal = h.MakeStyle("word-wrap", "normal")
//     /// Allows unbreakable words to be broken
//     member _.wordWrap_breakWord = h.MakeStyle("word-wrap", "break-word")
//     /// Sets this property to its default value.
//     member _.wordWrap_initial = h.MakeStyle("word-wrap", "initial")
//     /// Inherits this property from its parent element.
//     member _.wordWrap_inheritFromParent = h.MakeStyle("word-wrap", "inherit")

//     /// Default. The element inherits its parent container's align-items property, or "stretch" if it has no parent container.
//     member _.alignSelf_auto = h.MakeStyle("align-self", "auto")
//     /// The element is positioned to fit the container
//     member _.alignSelf_stretch = h.MakeStyle("align-self", "stretch")
//     /// The element is positioned at the center of the container
//     member _.alignSelf_center = h.MakeStyle("align-self", "center")
//     /// The element is positioned at the beginning of the container
//     member _.alignSelf_flexStart = h.MakeStyle("align-self", "flex-start")
//     /// The element is positioned at the end of the container
//     member _.alignSelf_flexEnd = h.MakeStyle("align-self", "flex-end")
//     /// The element is positioned at the baseline of the container
//     member _.alignSelf_baseline = h.MakeStyle("align-self", "baseline")
//     /// Sets this property to its default value
//     member _.alignSelf_initial = h.MakeStyle("align-self", "initial")
//     /// Inherits this property from its parent element
//     member _.alignSelf_inheritFromParent = h.MakeStyle("align-self", "inherit")

//     /// Default. Items are stretched to fit the container
//     member _.alignItems_stretch = h.MakeStyle("align-items", "stretch")
//     /// Items are positioned at the center of the container
//     member _.alignItems_center = h.MakeStyle("align-items", "center")
//     /// Items are positioned at the beginning of the container
//     member _.alignItems_flexStart = h.MakeStyle("align-items", "flex-start")
//     /// Items are positioned at the end of the container
//     member _.alignItems_flexEnd = h.MakeStyle("align-items", "flex-end")
//     /// Items are positioned at the baseline of the container
//     member _.alignItems_baseline = h.MakeStyle("align-items", "baseline")
//     /// Sets this property to its default value
//     member _.alignItems_initial = h.MakeStyle("align-items", "initial")
//     /// Inherits this property from its parent element
//     member _.alignItems_inheritFromParent = h.MakeStyle("align-items", "inherit")

// /// The `align-content` property modifies the behavior of the `flex-wrap` property.
// /// It is similar to align-items, but instead of aligning flex items, it aligns flex lines.
// ///
// /// **Note**: There must be multiple lines of items for this property to have any effect!
// ///
// /// **Tip**: Use the justify-content property to align the items on the main-axis (horizontally).
//     /// Default value. Lines stretch to take up the remaining space.
//     member _.alignContent_stretch = h.MakeStyle("align-content", "stretch")
//     /// Lines are packed toward the center of the flex container.
//     member _.alignContent_center = h.MakeStyle("align-content", "center")
//     /// Lines are packed toward the start of the flex container.
//     member _.alignContent_flexStart = h.MakeStyle("align-content", "flex-start")
//     /// Lines are packed toward the end of the flex container.
//     member _.alignContent_flexEnd = h.MakeStyle("align-content", "flex-end")
//     /// Lines are evenly distributed in the flex container.
//     member _.alignContent_spaceBetween = h.MakeStyle("align-content", "space-between")
//     /// Lines are evenly distributed in the flex container, with half-size spaces on either end.
//     member _.alignContent_spaceAround = h.MakeStyle("align-content", "space-around")
//     member _.alignContent_initial = h.MakeStyle("align-content", "initial")
//     member _.alignContent_inheritFromParent = h.MakeStyle("align-content", "inherit")

// /// The justify-content property aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).
// ///
// /// See https://www.w3schools.com/cssref/css3_pr_justify-content.asp for reference.
// ///
// /// **Tip**: Use the align-items property to align the items vertically.
//     /// Default value. Items are positioned at the beginning of the container.
//     member _.justifyContent_flexStart = h.MakeStyle("justify-content", "flex-start")
//     /// Items are positioned at the end of the container.
//     member _.justifyContent_flexEnd = h.MakeStyle("justify-content", "flex-end")
//     /// Items are positioned at the center of the container
//     member _.justifyContent_center = h.MakeStyle("justify-content", "center")
//     /// Items are positioned with space between the lines
//     member _.justifyContent_spaceBetween = h.MakeStyle("justify-content", "space-between")
//     /// Items are positioned with space before, between, and after the lines.
//     member _.justifyContent_spaceAround = h.MakeStyle("justify-content", "space-around")
//     /// Sets this property to its default value.
//     member _.justifyContent_initial = h.MakeStyle("justify-content", "initial")
//     /// Inherits this property from its parent element.
//     member _.justifyContent_inheritFromParent = h.MakeStyle("justify-content", "inherit")

// /// An outline is a line around an element.
// /// It is displayed around the margin of the element. However, it is different from the border property.
// /// The outline is not a part of the element's dimensions, therefore the element's width and height properties do not contain the width of the outline.
//     /// Specifies a medium outline. This is default.
//     member _.outlineWidth_medium = h.MakeStyle("outline-width", "medium")
//     /// Specifies a thin outline.
//     member _.outlineWidth_thin = h.MakeStyle("outline-width", "thin")
//     /// Specifies a thick outline.
//     member _.outlineWidth_thick = h.MakeStyle("outline-width", "thick")
//     /// Sets this property to its default value
//     member _.outlineWidth_initial = h.MakeStyle("outline-width", "initial")
//     /// Inherits this property from its parent element
//     member _.outlineWidth_inheritFromParent = h.MakeStyle("outline-width", "inherit")

//     /// Default value. The marker is a filled circle
//     member _.listStyleType_disc = h.MakeStyle("list-style-type", "disc")
//     /// The marker is traditional Armenian numbering
//     member _.listStyleType_armenian = h.MakeStyle("list-style-type", "armenian")
//     /// The marker is a circle
//     member _.listStyleType_circle = h.MakeStyle("list-style-type", "circle")
//     /// The marker is plain ideographic numbers
//     member _.listStyleType_cjkIdeographic = h.MakeStyle("list-style-type", "cjk-ideographic")
//     /// The marker is a number
//     member _.listStyleType_decimal = h.MakeStyle("list-style-type", "decimal")
//     /// The marker is a number with leading zeros (01, 02, 03, etc.)
//     member _.listStyleType_decimalLeadingZero = h.MakeStyle("list-style-type", "decimal-leading-zero")
//     /// The marker is traditional Georgian numbering
//     member _.listStyleType_georgian = h.MakeStyle("list-style-type", "georgian")
//     /// The marker is traditional Hebrew numbering
//     member _.listStyleType_hebrew = h.MakeStyle("list-style-type", "hebrew")
//     /// The marker is traditional Hiragana numbering
//     member _.listStyleType_hiragana = h.MakeStyle("list-style-type", "hiragana")
//     /// The marker is traditional Hiragana iroha numbering
//     member _.listStyleType_hiraganaIroha = h.MakeStyle("list-style-type", "hiragana-iroha")
//     /// The marker is traditional Katakana numbering
//     member _.listStyleType_katakana = h.MakeStyle("list-style-type", "katakana")
//     /// The marker is traditional Katakana iroha numbering
//     member _.listStyleType_katakanaIroha = h.MakeStyle("list-style-type", "katakana-iroha")
//     /// The marker is lower-alpha (a, b, c, d, e, etc.)
//     member _.listStyleType_lowerAlpha = h.MakeStyle("list-style-type", "lower-alpha")
//     /// The marker is lower-greek
//     member _.listStyleType_lowerGreek = h.MakeStyle("list-style-type", "lower-greek")
//     /// The marker is lower-latin (a, b, c, d, e, etc.)
//     member _.listStyleType_lowerLatin = h.MakeStyle("list-style-type", "lower-latin")
//     /// The marker is lower-roman (i, ii, iii, iv, v, etc.)
//     member _.listStyleType_lowerRoman = h.MakeStyle("list-style-type", "lower-roman")
//     /// No marker is shown
//     member _.listStyleType_none = h.MakeStyle("list-style-type", "none")
//     /// The marker is a square
//     member _.listStyleType_square = h.MakeStyle("list-style-type", "square")
//     /// The marker is upper-alpha (A, B, C, D, E, etc.)
//     member _.listStyleType_upperAlpha = h.MakeStyle("list-style-type", "upper-alpha")
//     /// The marker is upper-greek
//     member _.listStyleType_upperGreek = h.MakeStyle("list-style-type", "upper-greek")
//     /// The marker is upper-latin (A, B, C, D, E, etc.)
//     member _.listStyleType_upperLatin = h.MakeStyle("list-style-type", "upper-latin")
//     /// The marker is upper-roman (I, II, III, IV, V, etc.)
//     member _.listStyleType_upperRoman = h.MakeStyle("list-style-type", "upper-roman")
//     /// Sets this property to its default value.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial
//     member _.listStyleType_initial = h.MakeStyle("list-style-type", "initial")
//     /// Inherits this property from its parent element.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial
//     member _.listStyleType_inheritFromParent = h.MakeStyle("list-style-type", "inherit")

//     member _.property_none = h.MakeStyle("list-style-image", "none")
//     /// The path to the image to be used as a list-item marker
//     member _.property_url (path: string) = h.MakeStyle("list-style-image", "url('" + path + "')")
//     /// Sets this property to its default value.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial
//     member _.property_initial = h.MakeStyle("list-style-image", "initial")
//     /// Inherits this property from its parent element.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial
//     member _.property_inheritFromParent = h.MakeStyle("list-style-image", "inherit")

//     /// The bullet points will be inside the list item
//     member _.listStylePosition_inside = h.MakeStyle("list-style-position", "inside")
//     /// The bullet points will be outside the list item. This is default
//     member _.listStylePosition_outside = h.MakeStyle("list-style-position", "outside")
//     /// Sets this property to its default value.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial
//     member _.listStylePosition_initial = h.MakeStyle("list-style-position", "initial")
//     /// Inherits this property from its parent element.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial
//     member _.listStylePosition_inheritFromParent = h.MakeStyle("list-style-position", "inherit")

//     member _.textDecorationLine_none = h.MakeStyle("text-decoration-line", "none")
//     member _.textDecorationLine_underline = h.MakeStyle("text-decoration-line", "underline")
//     member _.textDecorationLine_overline = h.MakeStyle("text-decoration-line", "overline")
//     member _.textDecorationLine_lineThrough = h.MakeStyle("text-decoration-line", "line-through")
//     member _.textDecorationLine_initial = h.MakeStyle("text-decoration-line", "initial")
//     /// Inherits this property from its parent element.
//     member _.textDecorationLine_inheritFromParent = h.MakeStyle("text-decoration-line", "inherit")

//     member _.textDecoration_none = h.MakeStyle("text-decoration", "none")
//     member _.textDecoration_underline = h.MakeStyle("text-decoration", "underline")
//     member _.textDecoration_overline = h.MakeStyle("text-decoration", "overline")
//     member _.textDecoration_lineThrough = h.MakeStyle("text-decoration", "line-through")
//     member _.textDecoration_initial = h.MakeStyle("text-decoration", "initial")
//     /// Inherits this property from its parent element.
//     member _.textDecoration_inheritFromParent = h.MakeStyle("text-decoration", "inherit")

// /// The `transform-style` property specifies how nested elements are rendered in 3D space.
//     /// Specifies that child elements will NOT preserve its 3D position. This is default.
//     member _.transformStyle_flat = h.MakeStyle("transform-style", "flat")
//     /// Specifies that child elements will preserve its 3D position
//     member _.transformStyle_preserve3D = h.MakeStyle("transform-style", "preserve-3d")
//     member _.transformStyle_initial = h.MakeStyle("transform-style", "initial")
//     /// Inherits this property from its parent element.
//     member _.transformStyle_inheritFromParent = h.MakeStyle("transform-style", "inherit")

//     /// No capitalization. The text renders as it is. This is default.
//     member _.textTransform_none = h.MakeStyle("text-transform", "none")
//     /// Transforms the first character of each word to uppercase.
//     member _.textTransform_capitalize = h.MakeStyle("text-transform", "capitalize")
//     /// Transforms all characters to uppercase.
//     member _.textTransform_uppercase = h.MakeStyle("text-transform", "uppercase")
//     /// Transforms all characters to lowercase.
//     member _.textTransform_lowercase = h.MakeStyle("text-transform", "lowercase")
//     member _.textTransform_initial = h.MakeStyle("text-transform", "initial")
//     /// Inherits this property from its parent element.
//     member _.textTransform_inheritFromParent = h.MakeStyle("text-transform", "inherit")

//     /// Default value. The text is clipped and not accessible.
//     member _.textOverflow_clip = h.MakeStyle("text-overflow", "clip")
//     /// Render an ellipsis ("...") to represent the clipped text.
//     member _.textOverflow_ellipsis = h.MakeStyle("text-overflow", "ellipsis")
//     /// Render the given asString to represent the clipped text.
//     member _.textOverflow_custom(value: string) = h.MakeStyle("text-overflow", asString value)
//     member _.textOverflow_initial = h.MakeStyle("text-overflow", "initial")
//     /// Inherits this property from its parent element.
//     member _.textOverflow_inheritFromParent = h.MakeStyle("text-overflow", "inherit")

// /// Defines visual effects like blur and saturation to an element.
//     /// Default value. Specifies no effects.
//     member _.filter_none = h.MakeStyle("filter", "none")
//     /// Applies a blur effect to the elemeen. A larger value will create more blur.
//     ///
//     /// This overload takes an integer that represents a percentage from 0 to 100.
//     member _.filter_blur(value: int) = h.MakeStyle("filter", "blur(" + (asString value) + "%)")
//     /// Applies a blur effect to the elemeen. A larger value will create more blur.
//     ///
//     /// This overload takes a floating number that goes from 0 to 1,
//     member _.filter_blur(value: double) = h.MakeStyle("filter", "blur(" + (asString value) + ")")
//     /// Adjusts the brightness of the elemeen
//     ///
//     /// This overload takes an integer that represents a percentage from 0 to 100.
//     ///
//     /// Values over 100% will provide brighter results.
//     member _.filter_brightness(value: int) = h.MakeStyle("filter", "brightness(" + (asString value) + "%)")
//     /// Adjusts the brightness of the elemeen. A larger value will create more blur.
//     ///
//     /// This overload takes a floating number that goes from 0 to 1,
//     member _.filter_brightness(value: double) = h.MakeStyle("filter", "brightness(" + (asString value) + ")")
//     /// Adjusts the contrast of the element.
//     ///
//     /// This overload takes an integer that represents a percentage from 0 to 100.
//     member _.filter_contrast(value: int) = h.MakeStyle("filter", "contrast(" + (asString value) + "%)")
//     /// Adjusts the contrast of the element. A larger value will create more contrast.
//     ///
//     /// This overload takes a floating number that goes from 0 to 1
//     member _.filter_contrast(value: double) = h.MakeStyle("filter", "contrast(" + (asString value) + ")")
//     /// Applies a drop shadow effect.
//     member _.filter_dropShadow(horizontalOffset: int, verticalOffset: int, blur: int, spread: int,  color: string) = h.MakeStyle("filter", "drop-shadow(" + (asString horizontalOffset) + "px " + (asString verticalOffset) + "px " + (asString blur) + "px " + (asString spread) + "px " + color + ")" )

//     /// Applies a drop shadow effect.
//     member _.filter_dropShadow(horizontalOffset: int, verticalOffset: int, blur: int, color: string) = h.MakeStyle("filter", "drop-shadow(" + (asString horizontalOffset) + "px " + (asString verticalOffset) + "px " + (asString blur) + "px " + color + ")" )

//     /// Applies a drop shadow effect.
//     member _.filter_dropShadow(horizontalOffset: int, verticalOffset: int, color: string) = h.MakeStyle("filter", "drop-shadow(" + (asString horizontalOffset) + "px " + (asString verticalOffset) + "px " + color + ")" )

//     /// Converts the image to grayscale
//     ///
//     /// This overload takes an integer that represents a percentage from 0 to 100.
//     member _.filter_grayscale(value: int) = h.MakeStyle("filter", "grayscale(" + (asString value) + "%)")
//     /// Converts the image to grayscale
//     ///
//     /// This overload takes a floating number that goes from 0 to 1
//     member _.filter_grayscale(value: double) = h.MakeStyle("filter", "grayscale(" + (asString value) + ")")
//     /// Applies a hue rotation on the image. The value defines the number of degrees around the color circle the image
//     /// samples will be adjusted. 0deg is default, and represents the original image.
//     ///
//     /// **Note**: Maximum value is 360
//     member _.filter_hueRotate(degrees: int) = h.MakeStyle("filter", "hue-rotate(" + (asString degrees) + "deg)")
//     /// Inverts the element.
//     ///
//     /// This overload takes an integer that represents a percentage from 0 to 100.
//     member _.filter_invert(value: int) = h.MakeStyle("filter", "invert(" + (asString value) + "%)")
//     /// Inverts the element.
//     ///
//     /// This overload takes a floating number that goes from 0 to 1
//     member _.filter_invert(value: double) = h.MakeStyle("filter", "invert(" + (asString value) + ")")
//     /// Sets the opacity of the element.
//     ///
//     /// This overload takes an integer that represents a percentage from 0 to 100.
//     member _.filter_opacity(value: int) = h.MakeStyle("filter", "opacity(" + (asString value) + "%)")
//     /// Sets the opacity of the element.
//     ///
//     /// This overload takes a floating number that goes from 0 to 1
//     member _.filter_opacity(value: double) = h.MakeStyle("filter", "opacity(" + (asString value) + ")")
//     /// Sets the saturation of the element.
//     ///
//     /// This overload takes an integer that represents a percentage from 0 to 100.
//     member _.filter_saturate(value: int) = h.MakeStyle("filter", "saturate(" + (asString value) + "%)")
//     /// Sets the saturation of the element.
//     ///
//     /// This overload takes a floating number that goes from 0 to 1
//     member _.filter_saturate(value: double) = h.MakeStyle("filter", "saturate(" + (asString value) + ")")
//     /// Applies Sepia filter to the element.
//     ///
//     /// This overload takes an integer that represents a percentage from 0 to 100.
//     member _.filter_sepia(value: int) = h.MakeStyle("filter", "sepia(" + (asString value) + "%)")
//     /// Applies Sepia filter to the element.
//     ///
//     /// This overload takes a floating number that goes from 0 to 1
//     member _.filter_sepia(value: double) = h.MakeStyle("filter", "sepia(" + (asString value) + ")")
//     /// The url() function takes the location of an XML file that specifies an SVG filter, and may include an anchor to a specific filter element.
//     ///
//     /// Example: `filter: url(svg-url#element-id)`
//     member _.filter_url(value: string) = h.MakeStyle("filter", "url(" + value + ")")
//     /// Sets this property to its default value.
//     member _.filter_initial = h.MakeStyle("filter", "initial")
//     /// Inherits this property from its parent element.
//     member _.filter_inheritFromParent = h.MakeStyle("filter", "inherit")

// /// Sets whether table borders should collapse into a single border or be separated as in standard HTML.
//     /// Borders are separated; each cell will display its own borders. This is default.
//     member _.borderCollapse_separate = h.MakeStyle("border-collapse", "separate")
//     /// Borders are collapsed into a single border when possible (border-spacing and empty-cells properties have no effect)
//     member _.borderCollapse_collapse = h.MakeStyle("border-collapse", "collapse")
//     /// Sets this property to its default value
//     member _.borderCollapse_initial = h.MakeStyle("border-collapse", "initial")
//     /// Inherits this property from its parent element.
//     member _.borderCollapse_inheritFromParent = h.MakeStyle("border-collapse", "inherit")

// /// Specifies the size of the background images
//     /// Default value. The background image is displayed in its original size
//     ///
//     /// See [example here](https://www.w3schools.com/cssref/playit.asp?filename=playcss_background-size&preval=auto)
//     member _.backgroundSize_auto = h.MakeStyle("background-size", "auto")
//     /// Resize the background image to cover the entire container, even if it has to stretch the image or cut a little bit off one of the edges.
//     ///
//     /// See [example here](https://www.w3schools.com/cssref/playit.asp?filename=playcss_background-size&preval=cover)
//     member _.backgroundSize_cover = h.MakeStyle("background-size", "cover")
//     /// Resize the background image to make sure the image is fully visible
//     ///
//     /// See [example here](https://www.w3schools.com/cssref/playit.asp?filename=playcss_background-size&preval=contain)
//     member _.backgroundSize_contain = h.MakeStyle("background-size", "contain")
//     /// Sets this property to its default value.
//     member _.backgroundSize_initial = h.MakeStyle("background-size", "initial")
//     /// Inherits this property from its parent element.
//     member _.backgroundSize_inheritFromParent = h.MakeStyle("background-size", "inherit")

//     /// Default value. The line will display as a single line.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=solid
//     member _.textDecorationStyle_solid = h.MakeStyle("text-decoration-style", "solid")
//     /// The line will display as a double line.
//     ///
//     /// https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=double
//     member _.textDecorationStyle_double = h.MakeStyle("text-decoration-style", "double")
//     /// The line will display as a dotted line.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=dotted
//     member _.textDecorationStyle_dotted = h.MakeStyle("text-decoration-style", "dotted")
//     /// The line will display as a dashed line.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=dashed
//     member _.textDecorationStyle_dashed = h.MakeStyle("text-decoration-style", "dashed")
//     /// The line will display as a wavy line.
//     ///
//     /// https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=wavy
//     member _.textDecorationStyle_wavy = h.MakeStyle("text-decoration-style", "wavy")
//     /// Sets this property to its default value.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=initial
//     member _.textDecorationStyle_initial = h.MakeStyle("text-decoration-style", "initial")
//     /// Inherits this property from its parent element.
//     member _.textDecorationStyle_inheritFromParent = h.MakeStyle("text-decoration-style", "inherit")

//     /// Makes the text as narrow as it gets.
//     member _.fontStretch_ultraCondensed = h.MakeStyle("font-stretch", "ultra-condensed")
//     /// Makes the text narrower than condensed, but not as narrow as ultra-condensed
//     member _.fontStretch_extraCondensed = h.MakeStyle("font-stretch", "extra-condensed")
//     /// Makes the text narrower than semi-condensed, but not as narrow as extra-condensed.
//     member _.fontStretch_condensed = h.MakeStyle("font-stretch", "condensed")
//     /// Makes the text narrower than normal, but not as narrow as condensed.
//     member _.fontStretch_semiCondensed = h.MakeStyle("font-stretch", "semi-condensed")
//     /// Default value. No font stretching
//     member _.fontStretch_normal = h.MakeStyle("font-stretch", "normal")
//     /// Makes the text wider than normal, but not as wide as expanded
//     member _.fontStretch_semiExpanded = h.MakeStyle("font-stretch", "semi-expanded")
//     /// Makes the text wider than semi-expanded, but not as wide as extra-expanded
//     member _.fontStretch_expanded = h.MakeStyle("font-stretch", "expanded")
//     /// Makes the text wider than expanded, but not as wide as ultra-expanded
//     member _.fontStretch_extraExpanded = h.MakeStyle("font-stretch", "extra-expanded")
//     /// Makes the text as wide as it gets.
//     member _.fontStretch_ultraExpanded = h.MakeStyle("font-stretch", "ultra-expanded")
//     /// Sets this property to its default value.
//     member _.fontStretch_initial = h.MakeStyle("font-stretch", "initial")
//     /// Inherits this property from its parent element.
//     member _.fontStretch_inheritFromParent = h.MakeStyle("font-stretch", "inherit")

// /// Specifies how an element should float.
// ///
// /// **Note**: Absolutely positioned elements ignores the float property!
//     /// The element does not float, (will be displayed just where it occurs in the text). This is default
//     member _.floatStyle_none = h.MakeStyle("float", "none")
//     member _.floatStyle_left = h.MakeStyle("float", "left")
//     member _.floatStyle_right = h.MakeStyle("float", "right")
//     /// Sets this property to its default value.
//     member _.floatStyle_initial = h.MakeStyle("float", "initial")
//     /// Inherits this property from its parent element.
//     member _.floatStyle_inheritFromParent = h.MakeStyle("float", "inherit")

//     /// The element is aligned with the baseline of the parent. This is default.
//     member _.verticalAlign_baseline = h.MakeStyle("vertical-align", "baseline")
//     /// The element is aligned with the subscript baseline of the parent
//     member _.verticalAlign_sub = h.MakeStyle("vertical-align", "sup")
//     /// The element is aligned with the superscript baseline of the parent.
//     member _.verticalAlign_super = h.MakeStyle("vertical-align", "super")
//     /// The element is aligned with the top of the tallest element on the line.
//     member _.verticalAlign_top = h.MakeStyle("vertical-align", "top")
//     /// The element is aligned with the top of the parent element's font.
//     member _.verticalAlign_textTop = h.MakeStyle("vertical-align", "text-top")
//     /// The element is placed in the middle of the parent element.
//     member _.verticalAlign_middle = h.MakeStyle("vertical-align", "middle")
//     /// The element is aligned with the lowest element on the line.
//     member _.verticalAlign_bottom = h.MakeStyle("vertical-align", "bottom")
//     /// The element is aligned with the bottom of the parent element's font
//     member _.verticalAlign_textBottom = h.MakeStyle("vertical-align", "text-bottom")
//     /// Sets this property to its default value.
//     member _.verticalAlign_initial = h.MakeStyle("vertical-align", "initial")
//     /// Inherits this property from its parent element.
//     member _.verticalAlign_inheritFromParent = h.MakeStyle("vertical-align", "inherit")

// /// Specifies whether lines of text are laid out horizontally or vertically.
//     /// Let the content flow horizontally from left to right, vertically from top to bottom
//     member _.writingMode_horizontalTopBottom = h.MakeStyle("writing-mode", "horizontal-tb")
//     /// Let the content flow vertically from top to bottom, horizontally from right to left
//     member _.writingMode_verticalRightLeft = h.MakeStyle("writing-mode", "vertical-rl")
//     /// Let the content flow vertically from top to bottom, horizontally from left to right
//     member _.writingMode_verticalLeftRight = h.MakeStyle("writing-mode", "vertical-lr")
//     /// Sets this property to its default value.
//     member _.writingMode_initial = h.MakeStyle("writing-mode", "initial")
//     /// Inherits this property from its parent element.
//     member _.writingMode_inheritFromParent = h.MakeStyle("writing-mode", "inherit")

//     /// Default value. Specifies a animation effect with a slow start, then fast, then end slowly (equivalent to cubic-bezier(0.25,0.1,0.25,1)).
//     member _.animationTimingFunction_ease = h.MakeStyle("animation-timing-function", "ease")
//     /// Specifies a animation effect with the same speed from start to end (equivalent to cubic-bezier(0,0,1,1))
//     member _.animationTimingFunction_linear = h.MakeStyle("animation-timing-function", "linear")
//     /// Specifies a animation effect with a slow start (equivalent to cubic-bezier(0.42,0,1,1)).
//     member _.animationTimingFunction_easeIn = h.MakeStyle("animation-timing-function", "ease-in")
//     /// Specifies a animation effect with a slow end (equivalent to cubic-bezier(0,0,0.58,1)).
//     member _.animationTimingFunction_easeOut = h.MakeStyle("animation-timing-function", "ease-out")
//     /// Specifies a animation effect with a slow start and end (equivalent to cubic-bezier(0.42,0,0.58,1))
//     member _.animationTimingFunction_easeInOut = h.MakeStyle("animation-timing-function", "ease-in-out")
//     /// Define your own values in the cubic-bezier function. Possible values are numeric values from 0 to 1
//     member _.animationTimingFunction_cubicBezier(n1: float, n2: float, n3: float, n4: float) = h.MakeStyle("animation-timing-function", "cubic-bezier(" + (asString n1) + "," + (asString n2) + "," + (asString n3) + "," + (asString n4) + ")" )
//     /// Sets this property to its default value
//     member _.animationTimingFunction_initial = h.MakeStyle("animation-timing-function", "initial")
//     /// Inherits this property from its parent element.
//     member _.animationTimingFunction_inheritFromParent = h.MakeStyle("animation-timing-function", "inherit")

//     /// Default value. Specifies a transition effect with a slow start, then fast, then end slowly (equivalent to cubic-bezier(0.25,0.1,0.25,1)).
//     member _.transitionTimingFunction_ease = h.MakeStyle("transition-timing-function", "ease")
//     /// Specifies a transition effect with the same speed from start to end (equivalent to cubic-bezier(0,0,1,1))
//     member _.transitionTimingFunction_linear = h.MakeStyle("transition-timing-function", "linear")
//     /// Specifies a transition effect with a slow start (equivalent to cubic-bezier(0.42,0,1,1)).
//     member _.transitionTimingFunction_easeIn = h.MakeStyle("transition-timing-function", "ease-in")
//     /// Specifies a transition effect with a slow end (equivalent to cubic-bezier(0,0,0.58,1)).
//     member _.transitionTimingFunction_easeOut = h.MakeStyle("transition-timing-function", "ease-out")
//     /// Specifies a transition effect with a slow start and end (equivalent to cubic-bezier(0.42,0,0.58,1))
//     member _.transitionTimingFunction_easeInOut = h.MakeStyle("transition-timing-function", "ease-in-out")
//     /// Equivalent to steps(1, start)
//     member _.transitionTimingFunction_stepStart = h.MakeStyle("transition-timing-function", "step-start")
//     /// Equivalent to steps(1, end)
//     member _.transitionTimingFunction_stepEnd = h.MakeStyle("transition-timing-function", "step-end")
//     member _.transitionTimingFunction_stepsToEnd(steps: int) =
//         h.MakeStyle("transition-timing-function", "steps(" + (asString steps) + ", end)")
//     member _.transitionTimingFunction_stepsToStart(steps: int) =
//         h.MakeStyle("transition-timing-function", "steps(" + (asString steps) + ", start)")
//     /// Define your own values in the cubic-bezier function. Possible values are numeric values from 0 to 1
//     member _.transitionTimingFunction_cubicBezier(n1: float, n2: float, n3: float, n4: float) = h.MakeStyle("transition-timing-function", "cubic-bezier(" + (asString n1) + "," + (asString n2) + "," + (asString n3) + "," + (asString n4) + ")" )
//     /// Sets this property to its default value
//     member _.transitionTimingFunction_initial = h.MakeStyle("transition-timing-function", "initial")
//     /// Inherits this property from its parent element.
//     member _.transitionTimingFunction_inheritFromParent = h.MakeStyle("transition-timing-function", "inherit")

//     /// Default. Text can be selected if the browser allows it.
//     member _.userSelect_auto = h.MakeStyle("user-select", "auto")
//     /// Prevents text selection.
//     member _.userSelect_none = h.MakeStyle("user-select", "none")
//     /// The text can be selected by the user.
//     member _.userSelect_text = h.MakeStyle("user-select", "text")
//     /// Text selection is made with one click instead of a double-click.
//     member _.userSelect_all = h.MakeStyle("user-select", "all")
//     /// Sets this property to its default value.
//     member _.userSelect_initial = h.MakeStyle("user-select", "initial")
//     /// Inherits this property from its parent element.
//     member _.userSelect_inheritFromParent = h.MakeStyle("user-select", "inherit")

//     /// Specifies a dotted border.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted
//     member _.borderStyle_dotted = h.MakeStyle("border-style", "dotted")
//     /// Specifies a dashed border.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted
//     member _.borderStyle_dashed = h.MakeStyle("border-style", "dashed")
//     /// Specifies a solid border.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted
//     member _.borderStyle_solid = h.MakeStyle("border-style", "solid")
//     /// Specifies a double border.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted
//     member _.borderStyle_double = h.MakeStyle("border-style", "double")
//     /// Specifies a 3D grooved border. The effect depends on the border-color value.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted
//     member _.borderStyle_groove = h.MakeStyle("border-style", "groove")
//     /// Specifies a 3D ridged border. The effect depends on the border-color value.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted
//     member _.borderStyle_ridge = h.MakeStyle("border-style", "ridge")
//     /// Specifies a 3D inset border. The effect depends on the border-color value.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted
//     member _.borderStyle_inset = h.MakeStyle("border-style", "inset")
//     /// Specifies a 3D outset border. The effect depends on the border-color value.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted
//     member _.borderStyle_outset = h.MakeStyle("border-style", "outset")
//     /// Default value. Specifies no border.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted
//     member _.borderStyle_none = h.MakeStyle("border-style", "none")
//     /// The same as "none", except in border conflict resolution for table elements.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=hidden
//     member _.borderStyle_hidden = h.MakeStyle("border-style", "hidden")
//     /// Sets this property to its default value.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=hidden
//     ///
//     /// Read about initial value https://www.w3schools.com/cssref/css_initial.asp
//     member _.borderStyle_initial = h.MakeStyle("border-style", "initial")
//     /// Inherits this property from its parent element.
//     ///
//     /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=hidden
//     ///
//     /// Read about inherit https://www.w3schools.com/cssref/css_inherit.asp
//     member _.borderStyle_inheritFromParent = h.MakeStyle("border-style", "inherit")

// /// Defines the algorithm used to lay out table cells, rows, and columns.
// ///
// /// **Tip:** The main benefit of table-layout: fixed; is that the table renders much faster. On large tables,
// /// users will not see any part of the table until the browser has rendered the whole table. So, if you use
// /// table-layout: fixed, users will see the top of the table while the browser loads and renders rest of the
// /// table. This gives the impression that the page loads a lot quicker!
//     /// Browsers use an automatic table layout algorithm. The column width is set by the widest unbreakable
//     /// content in the cells. The content will dictate the layout
//     member _.tableLayout_auto = h.MakeStyle("table-layout", "auto")
//     /// Sets a fixed table layout algorithm. The table and column widths are set by the widths of table and col
//     /// or by the width of the first row of cells. Cells in other rows do not affect column widths. If no widths
//     /// are present on the first row, the column widths are divided equally across the table, regardless of content
//     /// inside the cells
//     member _.tableLayout_fixed' = h.MakeStyle("table-layout", "fixed")
//     /// Sets this property to its default value.
//     member _.tableLayout_initial = h.MakeStyle("table-layout", "initial")
//     /// Inherits this property from its parent element.
//     member _.tableLayout_inheritFromParent = h.MakeStyle("table-layout", "inherit")

// /// See documentation at https://developer.mozilla.org/en-US/docs/Web/CSS/cursor
//     /// The User Agent will determine the cursor to display based on the current context. E.g., equivalent to text when hovering text.
//     member _.cursor_auto = h.MakeStyle("cursor", "auto")
//     /// The cursor indicates an alias of something is to be created
//     member _.cursor_alias = h.MakeStyle("cursor", "alias")
//     /// The platform-dependent default cursor. Typically an arrow.
//     member _.cursor_defaultCursor = h.MakeStyle("cursor", "default")
//     /// No cursor is rendered.
//     member _.cursor_none = h.MakeStyle("cursor", "none")
//     /// A context menu is available.
//     member _.cursor_contextMenu = h.MakeStyle("cursor", "context-menu")
//     /// Help information is available.
//     member _.cursor_help = h.MakeStyle("cursor", "help")
//     /// The cursor is a pointer that indicates a link. Typically an image of a pointing hand.
//     member _.cursor_pointer = h.MakeStyle("cursor", "pointer")
//     /// The program is busy in the background, but the user can still interact with the interface (in contrast to `wait`).
//     member _.cursor_progress = h.MakeStyle("cursor", "progress")
//     /// The program is busy, and the user can't interact with the interface (in contrast to progress). Sometimes an image of an hourglass or a watch.
//     member _.cursor_wait = h.MakeStyle("cursor", "wait")
//     /// The table cell or set of cells can be selected.
//     member _.cursor_cell = h.MakeStyle("cursor", "cell")
//     /// Cross cursor, often used to indicate selection in a bitmap.
//     member _.cursor_crosshair = h.MakeStyle("cursor", "crosshair")
//     /// The text can be selected. Typically the shape of an I-beam.
//     member _.cursor_text = h.MakeStyle("cursor", "text")
//     /// The vertical text can be selected. Typically the shape of a sideways I-beam.
//     member _.cursor_verticalText = h.MakeStyle("cursor", "vertical-text")
//     /// Something is to be copied.
//     member _.cursor_copy = h.MakeStyle("cursor", "copy")
//     /// Something is to be moved.
//     member _.cursor_move = h.MakeStyle("cursor", "move")
//     /// An item may not be dropped at the current location. On Windows and Mac OS X, `no-drop` is the same as `not-allowed`.
//     member _.cursor_noDrop = h.MakeStyle("cursor", "no-drop")
//     /// The requested action will not be carried out.
//     member _.cursor_notAllowed = h.MakeStyle("cursor", "not-allowed")
//     /// Something can be grabbed (dragged to be moved).
//     member _.cursor_grab = h.MakeStyle("cursor", "grab")
//     /// Something is being grabbed (dragged to be moved).
//     member _.cursor_grabbing = h.MakeStyle("cursor", "grabbing")
//     /// Something can be scrolled in any direction (panned).
//     member _.cursor_allScroll = h.MakeStyle("cursor", "all-scroll")
//     /// The item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them.
//     member _.cursor_columnResize = h.MakeStyle("cursor", "col-resize")
//     /// The item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.
//     member _.cursor_rowResize = h.MakeStyle("cursor", "row-resize")
//     /// Directional resize arrow
//     member _.cursor_northResize = h.MakeStyle("cursor", "n-resize")
//     /// Directional resize arrow
//     member _.cursor_eastResize = h.MakeStyle("cursor", "e-resize")
//     /// Directional resize arrow
//     member _.cursor_southResize = h.MakeStyle("cursor", "s-resize")
//     /// Directional resize arrow
//     member _.cursor_westResize = h.MakeStyle("cursor", "w-resize")
//     /// Directional resize arrow
//     member _.cursor_northEastResize = h.MakeStyle("cursor", "ne-resize")
//     /// Directional resize arrow
//     member _.cursor_northWestResize = h.MakeStyle("cursor", "nw-resize")
//     /// Directional resize arrow
//     member _.cursor_southEastResize = h.MakeStyle("cursor", "se-resize")
//     /// Directional resize arrow
//     member _.cursor_southWestResize = h.MakeStyle("cursor", "sw-resize")
//     /// Directional resize arrow
//     member _.cursor_eastWestResize = h.MakeStyle("cursor", "ew-resize")
//     /// Directional resize arrow
//     member _.cursor_northSouthResize = h.MakeStyle("cursor", "ns-resize")
//     /// Directional resize arrow
//     member _.cursor_northEastSouthWestResize = h.MakeStyle("cursor", "nesw-resize")
//     /// Directional resize arrow
//     member _.cursor_northWestSouthEastResize = h.MakeStyle("cursor", "nwse-resize")
//     /// Something can be zoomed (magnified) in
//     member _.cursor_zoomIn = h.MakeStyle("cursor", "zoom-in")
//     /// Something can be zoomed out
//     member _.cursor_zoomOut = h.MakeStyle("cursor", "zoom-out")

// /// An outline is a line that is drawn around elements (outside the borders) to make the element "stand out".
// ///
// /// The outline-style property specifies the style of an outline.
// ///
// /// An outline is a line around an element. It is displayed around the margin of the element. However, it is different from the border property.
// ///
// /// The outline is not a part of the element's dimensions, therefore the element's width and height properties do not contain the width of the outline.
//     /// Permits the user agent to render a custom outline style.
//     member _.outlineStyle_auto = h.MakeStyle("outline-style", "auto")
//     /// Specifies no outline. This is default.
//     member _.outlineStyle_none = h.MakeStyle("outline-style", "none")
//     /// Specifies a hidden outline
//     member _.outlineStyle_hidden = h.MakeStyle("outline-style", "hidden")
//     /// Specifies a dotted outline
//     member _.outlineStyle_dotted = h.MakeStyle("outline-style", "dotted")
//     /// Specifies a dashed outline
//     member _.outlineStyle_dashed = h.MakeStyle("outline-style", "dashed")
//     /// Specifies a solid outline
//     member _.outlineStyle_solid = h.MakeStyle("outline-style", "solid")
//     /// Specifies a double outliner
//     member _.outlineStyle_double = h.MakeStyle("outline-style", "double")
//     /// Specifies a 3D grooved outline. The effect depends on the outline-color value
//     member _.outlineStyle_groove = h.MakeStyle("outline-style", "groove")
//     /// Specifies a 3D ridged outline. The effect depends on the outline-color value
//     member _.outlineStyle_ridge = h.MakeStyle("outline-style", "ridge")
//     /// Specifies a 3D inset  outline. The effect depends on the outline-color value
//     member _.outlineStyle_inset = h.MakeStyle("outline-style", "inset")
//     /// Specifies a 3D outset outline. The effect depends on the outline-color value
//     member _.outlineStyle_outset = h.MakeStyle("outline-style", "outset")
//     /// Sets this property to its default value
//     member _.outlineStyle_initial = h.MakeStyle("outline-style", "initial")
//     /// Inherits this property from its parent element
//     member _.outlineStyle_inheritFromParent = h.MakeStyle("outline-style", "inherit")
//     /// Resets to its inherited value if the property naturally inherits from its parent,
//     /// and to its initial value if not.
//     member _.outlineStyle_unset = h.MakeStyle("outline-style", "unset")

//     /// The background image will scroll with the page. This is default.
//     member _.backgroundPosition_scroll = h.MakeStyle("background-position", "scroll")
//     /// The background image will not scroll with the page.
//     member _.backgroundPosition_fixedNoScroll = h.MakeStyle("background-position", "fixed")
//     /// The background image will scroll with the element's contents.
//     member _.backgroundPosition_local = h.MakeStyle("background-position", "local")
//     /// Sets this property to its default value.
//     member _.backgroundPosition_initial = h.MakeStyle("background-position", "initial")
//     /// Inherits this property from its parent element.
//     member _.backgroundPosition_inheritFromParent = h.MakeStyle("background-position", "inherit")

// /// This property defines the blending mode of each background layer (color and/or image).
//     /// This is default. Sets the blending mode to normal.
//     member _.backgroundBlendMode_normal = h.MakeStyle("background-blend-mode", "normal")
//     /// Sets the blending mode to screen
//     member _.backgroundBlendMode_screen = h.MakeStyle("background-blend-mode", "screen")
//     /// Sets the blending mode to overlay
//     member _.backgroundBlendMode_overlay = h.MakeStyle("background-blend-mode", "overlay")
//     /// Sets the blending mode to darken
//     member _.backgroundBlendMode_darken = h.MakeStyle("background-blend-mode", "darken")
//     /// Sets the blending mode to multiply
//     member _.backgroundBlendMode_lighten = h.MakeStyle("background-blend-mode", "lighten")
//     /// Sets the blending mode to color-dodge
//     member _.backgroundBlendMode_collorDodge = h.MakeStyle("background-blend-mode", "color-dodge")
//     /// Sets the blending mode to saturation
//     member _.backgroundBlendMode_saturation = h.MakeStyle("background-blend-mode", "saturation")
//     /// Sets the blending mode to color
//     member _.backgroundBlendMode_color = h.MakeStyle("background-blend-mode", "color")
//     /// Sets the blending mode to luminosity
//     member _.backgroundBlendMode_luminosity = h.MakeStyle("background-blend-mode", "luminosity")

// /// Defines how far the background (color or image) should extend within an element.
//     /// Default value. The background extends behind the border.
//     member _.backgroundClip_borderBox = h.MakeStyle("background-clip", "border-box")
//     /// The background extends to the inside edge of the border.
//     member _.backgroundClip_paddingBox = h.MakeStyle("background-clip", "padding-box")
//     /// The background extends to the edge of the content box.
//     member _.backgroundClip_contentBox = h.MakeStyle("background-clip", "content-box")
//     /// Sets this property to its default value.
//     member _.backgroundClip_initial = h.MakeStyle("background-clip", "initial")
//     /// Inherits this property from its parent element.
//     member _.backgroundClip_inheritFromParent = h.MakeStyle("background-clip", "inherit")

//     /// Defines that there should be no transformation.
//     member _.transform_none = h.MakeStyle("transform", "none")
//     /// Defines a 2D transformation, using a matrix of six values.
//     member _.transform_matrix(x1: int, y1: int, z1: int, x2: int, y2: int, z2: int) = h.MakeStyle("transform", "matrix(" + (asString x1) + "," + (asString y1) + "," + (asString z1) + "," + (asString x2) + "," + (asString y2) + "," + (asString z2) + ")" )

//     /// Defines a 2D translation.
//     member _.transform_translate(x: int, y: int) = h.MakeStyle("transform", "translate(" + (asString x) + "px," + (asString y) + "px)" )
//     /// Defines a 2D translation.
//     member _.transform_translate(x: ICssUnit, y: ICssUnit) = h.MakeStyle("transform", "translate(" + (asString x) + "," + (asString y) + ")" )

//     /// Defines a 3D translation.
//     member _.transform_translate3D(x: int, y: int, z: int) = h.MakeStyle("transform", "translate3d(" + (asString x) + "px," + (asString y) + "px," + (asString z) + "px)" )
//     /// Defines a 3D translation.
//     member _.transform_translate3D(x: ICssUnit, y: ICssUnit, z: ICssUnit) = h.MakeStyle("transform", "translate3d(" + (asString x) + "," + (asString y) + "," + (asString z) + ")")

//     /// Defines a translation, using only the value for the X-axis.
//     member _.transform_translateX(x: int) = h.MakeStyle("transform", "translateX(" + (asString x) + "px)")
//     /// Defines a translation, using only the value for the X-axis.
//     member _.transform_translateX(x: ICssUnit) = h.MakeStyle("transform", "translateX(" + (asString x) + ")")
//     /// Defines a translation, using only the value for the Y-axis
//     member _.transform_translateY(y: int) = h.MakeStyle("transform", "translateY(" + (asString y) + "px)")
//     /// Defines a translation, using only the value for the Y-axis
//     member _.transform_translateY(y: ICssUnit) = h.MakeStyle("transform", "translateY(" + (asString y) + ")")
//     /// Defines a 3D translation, using only the value for the Z-axis
//     member _.transform_translateZ(z: int) =  h.MakeStyle("transform", "translateZ(" + (asString z) + "px)")
//     /// Defines a 3D translation, using only the value for the Z-axis
//     member _.transform_translateZ(z: ICssUnit) = h.MakeStyle("transform", "translateZ(" + (asString z) + ")")

//     /// Defines a 2D scale transformation.
//     member _.transform_scale(x: int, y: int) = h.MakeStyle("transform", "scale(" + (asString x) + "," + (asString y) + ")" )
//     /// Defines a scale transformation.
//     member _.transform_scale(n: int) =  h.MakeStyle("transform", "scale(" + (asString n) + ")" )

//     /// Defines a scale transformation.
//     member _.transform_scale(n: float) = h.MakeStyle("transform", "scale(" + (asString n) + ")" )

//     /// Defines a 3D scale transformation
//     member _.transform_scale3D(x: int, y: int, z: int) = h.MakeStyle("transform", "scale3d(" + (asString x) + "," + (asString y) + "," + (asString z) + ")" )

//     /// Defines a scale transformation by giving a value for the X-axis.
//     member _.transform_scaleX(x: int) = h.MakeStyle("transform", "scaleX(" + (asString x) + ")")

//     /// Defines a scale transformation by giving a value for the Y-axis.
//     member _.transform_scaleY(y: int) = h.MakeStyle("transform", "scaleY(" + (asString y) + ")")
//     /// Defines a 3D translation, using only the value for the Z-axis
//     member _.transform_scaleZ(z: int) = h.MakeStyle("transform", "scaleZ(" + (asString z) + ")")
//     /// Defines a 2D rotation, the angle is specified in the parameter.
//     member _.transform_rotate(deg: int) = h.MakeStyle("transform", "rotate(" + (asString deg) + "deg)")
//     /// Defines a 2D rotation, the angle is specified in the parameter.
//     member _.transform_rotate(deg: float) = h.MakeStyle("transform", "rotate(" + (asString deg) + "deg)")
//     /// Defines a 3D rotation along the X-axis.
//     member _.transform_rotateX(deg: float) = h.MakeStyle("transform", "rotateX(" + (asString deg) + "deg)")
//     /// Defines a 3D rotation along the X-axis.
//     member _.transform_rotateX(deg: int) = h.MakeStyle("transform", "rotateX(" + (asString deg) + "deg)")
//     /// Defines a 3D rotation along the Y-axis
//     member _.transform_rotateY(deg: float) = h.MakeStyle("transform", "rotateY(" + (asString deg) + "deg)")
//     /// Defines a 3D rotation along the Y-axis
//     member _.transform_rotateY(deg: int) = h.MakeStyle("transform", "rotateY(" + (asString deg) + "deg)")
//     /// Defines a 3D rotation along the Z-axis
//     member _.transform_rotateZ(deg: float) = h.MakeStyle("transform", "rotateZ(" + (asString deg) + "deg)")
//     /// Defines a 3D rotation along the Z-axis
//     member _.transform_rotateZ(deg: int) = h.MakeStyle("transform", "rotateZ(" + (asString deg) + "deg)")
//     /// Defines a 2D skew transformation along the X- and the Y-axis.
//     member _.transform_skew(xAngle: int, yAngle: int) = h.MakeStyle("transform", "skew(" + (asString xAngle) + "deg," + (asString yAngle) + "deg)")
//     /// Defines a 2D skew transformation along the X- and the Y-axis.
//     member _.transform_skew(xAngle: float, yAngle: float) = h.MakeStyle("transform", "skew(" + (asString xAngle) + "deg," + (asString yAngle) + "deg)")
//     /// Defines a 2D skew transformation along the X-axis
//     member _.transform_skewX(xAngle: int) = h.MakeStyle("transform", "skewX(" + (asString xAngle) + "deg)")
//     /// Defines a 2D skew transformation along the X-axis
//     member _.transform_skewX(xAngle: float) = h.MakeStyle("transform", "skewX(" + (asString xAngle) + "deg)")
//     /// Defines a 2D skew transformation along the Y-axis
//     member _.transform_skewY(xAngle: int) = h.MakeStyle("transform", "skewY(" + (asString xAngle) + "deg)")
//     /// Defines a 2D skew transformation along the Y-axis
//     member _.transform_skewY(xAngle: float) = h.MakeStyle("transform", "skewY(" + (asString xAngle) + "deg)")
//     /// Defines a perspective view for a 3D transformed element
//     member _.transform_perspective(n: int) = h.MakeStyle("transform", "perspective(" + (asString n) + ")")
//     /// Sets this property to its default value.
//     member _.transform_initial = h.MakeStyle("transform", "initial")
//     /// Inherits this property from its parent element.
//     member _.transform_inheritFromParent = h.MakeStyle("transform", "inherit")

//     member _.margin_auto = h.MakeStyle("margin", "auto")

// /// The direction property specifies the text direction/writing direction within a block-level element.
//     /// Text direction goes from right-to-left
//     member _.direction_rightToLeft = h.MakeStyle("direction", "rtl")
//     /// Text direction goes from left-to-right. This is default
//     member _.direction_leftToRight = h.MakeStyle("direction", "ltr")
//     /// Sets this property to its default value.
//     member _.direction_initial = h.MakeStyle("direction", "initial")
//     /// Inherits this property from its parent element.
//     member _.direction_inheritFromParent = h.MakeStyle("direction", "inherit")

// /// Sets whether or not to display borders on empty cells in a table.
//     /// Display borders on empty cells. This is default
//     member _.emptyCells_show = h.MakeStyle("empty-cells", "show")
//     /// Hide borders on empty cells
//     member _.emptyCells_hide = h.MakeStyle("empty-cells", "hide")
//     /// Sets this property to its default value
//     member _.emptyCells_initial = h.MakeStyle("empty-cells", "initial")
//     /// Inherits this property from its parent element
//     member _.emptyCells_inheritFromParent = h.MakeStyle("empty-cells", "inherit")


// /// Sets whether or not the animation should play in reverse on alternate cycles.
//     /// Default value. The animation should be played as normal
//     member _.animationDirection_normal = h.MakeStyle("animation-direction", "normal")
//     /// The animation should play in reverse direction
//     member _.animationDirection_reverse = h.MakeStyle("animation-direction", "reverse")
//     /// The animation will be played as normal every odd time (1, 3, 5, etc..) and in reverse direction every even time (2, 4, 6, etc...).
//     member _.animationDirection_alternate = h.MakeStyle("animation-direction", "alternate")
//     /// The animation will be played in reverse direction every odd time (1, 3, 5, etc..) and in a normal direction every even time (2,4,6,etc...)
//     member _.animationDirection_alternateReverse = h.MakeStyle("animation-direction", "alternate-reverse")
//     /// Sets this property to its default value
//     member _.animationDirection_initial = h.MakeStyle("animation-direction", "initial")
//     /// Inherits this property from its parent element.
//     member _.animationDirection_inheritFromParent = h.MakeStyle("animation-direction", "inherit")

//     /// Default value. Specifies that the animation is running.
//     member _.animationPlayState_running = h.MakeStyle("animation-play-state", "running")
//     /// Specifies that the animation is paused
//     member _.animationPlayState_paused = h.MakeStyle("animation-play-state", "paused")
//     /// Sets this property to its default value
//     member _.animationPlayState_initial = h.MakeStyle("animation-play-state", "initial")
//     /// Inherits this property from its parent element.
//     member _.animationPlayState_inheritFromParent = h.MakeStyle("animation-play-state", "inherit")

//     /// Specifies that the animation should be played infinite times (forever)
//     member _.animationIterationCount_infinite = h.MakeStyle("animation-iteration-count", "infinite")
//     /// Sets this property to its default value
//     member _.animationIterationCount_initial = h.MakeStyle("animation-iteration-count", "initial")
//     /// Inherits this property from its parent element.
//     member _.animationIterationCount_inheritFromParent = h.MakeStyle("animation-iteration-count", "inherit")

// /// Specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).
//     /// Default value. Animation will not apply any styles to the element before or after it is executing
//     member _.animationFillMode_none = h.MakeStyle("animation-fill-mode", "none")
//     /// The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count).
//     member _.animationFillMode_forwards = h.MakeStyle("animation-fill-mode", "forwards")
//     /// The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period
//     member _.animationFillMode_backwards = h.MakeStyle("animation-fill-mode", "backwards")
//     /// The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions
//     member _.animationFillMode_both = h.MakeStyle("animation-fill-mode", "both")
//     /// Sets this property to its default value
//     member _.animationFillMode_initial = h.MakeStyle("animation-fill-mode", "initial")
//     /// Inherits this property from its parent element
//     member _.animationFillMode_inheritFromParent = h.MakeStyle("animation-fill-mode", "inherit")

//     /// The background image is repeated both vertically and horizontally. This is default.
//     member _.backgroundRepeat_repeat = h.MakeStyle("background-repeat", "repeat")
//     /// The background image is only repeated horizontally.
//     member _.backgroundRepeat_repeatX = h.MakeStyle("background-repeat", "repeat-x")
//     /// The background image is only repeated vertically.
//     member _.backgroundRepeat_repeatY = h.MakeStyle("background-repeat", "repeat-y")
//     /// The background-image is not repeated.
//     member _.backgroundRepeat_noRepeat = h.MakeStyle("background-repeat", "no-repeat")
//     /// Sets this property to its default value.
//     member _.backgroundRepeat_initial = h.MakeStyle("background-repeat", "initial")
//     /// Inherits this property from its parent element.
//     member _.backgroundRepeat_inheritFromParent = h.MakeStyle("background-repeat", "inherit")

//     /// Default value. Elements render in order, as they appear in the document flow.
//     member _.position_defaultStatic = h.MakeStyle("position", "static")
//     /// The element is positioned relative to its first positioned (not static) ancestor element.
//     member _.position_absolute = h.MakeStyle("position", "absolute")
//     /// The element is positioned relative to the browser window
//     member _.position_fixedRelativeToWindow = h.MakeStyle("position", "fixed")
//     /// The element is positioned relative to its normal position, so "left:20px" adds 20 pixels to the element's LEFT position.
//     member _.position_relative = h.MakeStyle("position", "relative")
//     /// The element is positioned based on the user's scroll position
//     ///
//     /// A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).
//     ///
//     /// Note: Not supported in IE/Edge 15 or earlier. Supported in Safari from version 6.1 with a -webkit- prefix.
//     member _.position_sticky = h.MakeStyle("position", "sticky")
//     member _.position_initial = h.MakeStyle("position", "initial")
//     /// Inherits this property from its parent element.
//     member _.position_inheritFromParent = h.MakeStyle("position", "inherit")

// /// Sets how the total width and height of an element is calculated.
//     /// Default value. The width and height properties include the content, but does not include the padding, border, or margin.
//     member _.boxSizing_contentBox = h.MakeStyle("box-sizing", "content-box")
//     /// The width and height properties include the content, padding, and border, but do not include the margin. Note that padding and border will be inside of the box.
//     member _.boxSizing_borderBox = h.MakeStyle("box-sizing", "border-box")
//     /// Sets this property to its default value.
//     member _.boxSizing_initial = h.MakeStyle("box-sizing", "initial")
//     /// Inherits this property from its parent element.
//     member _.boxSizing_inheritFromParent = h.MakeStyle("box-sizing", "inherit")

// /// Sets whether an element is resizable, and if so, in which directions.
//     /// Default value. The element offers no user-controllable method for resizing it.
//     member _.resize_none = h.MakeStyle("resize", "none")
//     /// The element displays a mechanism for allowing the user to resize it, which may be resized both horizontally and vertically.
//     member _.resize_both = h.MakeStyle("resize", "both")
//     /// The element displays a mechanism for allowing the user to resize it in the horizontal direction.
//     member _.resize_horizontal = h.MakeStyle("resize", "horizontal")
//     /// The element displays a mechanism for allowing the user to resize it in the vertical direction.
//     member _.resize_vertical = h.MakeStyle("resize", "vertical")
//     /// The element displays a mechanism for allowing the user to resize it in the block direction (either horizontally or vertically, depending on the writing-mode and direction value).
//     member _.resize_block = h.MakeStyle("resize", "block")
//     /// The element displays a mechanism for allowing the user to resize it in the inline direction (either horizontally or vertically, depending on the writing-mode and direction value).
//     member _.resize_inline' = h.MakeStyle("resize", "inline")
//     /// Sets this property to its default value.
//     member _.resize_initial = h.MakeStyle("resize", "initial")
//     /// Inherits this property from its parent element.
//     member _.resize_inheritFromParent = h.MakeStyle("resize", "inherit")
